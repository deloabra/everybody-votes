{"version":3,"sources":["items/Header.js","utils/API.js","pages/Homepage.js","pages/PollForm.js","pages/PollRes.js","MainContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","getQuestion","questionId","axios","get","createQuestion","body","a","post","createAnswerChoice","getAnswerChoices","getVotes","createVote","Homepage","useState","idQuery","setIdQuery","redirect","setRedirect","handleSearch","event","preventDefault","API","undefined","data","alert","id","to","className","type","value","onChange","target","onClick","PollForm","question","setQuestion","answerChoices","setAnswerChoices","handleAnswerChange","temp","dataset","deleteAnswerChoice","splice","handleSubmit","length","i","questionBody","questionData","insertId","choiceBody","choiceNum","choice","map","index","key","data-id","placeholder","push","PollRes","userIp","showResults","setShowResults","castingVote","setCastingVote","setQuestionData","answerData","setAnswerData","voteData","setVoteData","selectedAnswer","setSelectedAnswer","parsedVotes","setParsedVotes","location","useLocation","pathname","substring","indexOf","useEffect","mounted","then","result","results","voteCounter","parseVotes","handleRadioChange","checked","name","htmlFor","MainContentContainer","setUserIp","ip","require","address","exact","path","component","render","props","App","MainContainer","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5e4f1e47.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header(){\n    return(\n        <div>\n            <header className=\"App-header\">\n            </header>\n\n            {/* navbar */}\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-warning\">\n\n                {/* Add Home link to website name on navbar */}\n                <a className=\"navbar-brand\" href=\"index.html\">Everbody Votes</a>\n\n                {/* create navbar toggler icon for small screens */}\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n\n                {/* navbar links */}\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                    <ul className=\"navbar-nav\">\n\n                        {/* create new list elements like this to add more links to navbar */}\n                        <li className=\"nav-item active\">\n                            <a className=\"nav-link\" href=\"index.html\">test</a>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        </div>\n    )\n}\n\nexport default Header;","import axios from \"axios\";\n\nexport default {\n    getQuestion: function(questionId) {\n        return axios.get(`/question/${questionId}`);\n    },\n\n    createQuestion: async function(body) {\n        return await axios.post(\"/api/createquestion\", body);\n    },\n\n    createAnswerChoice: async function(body){\n        return await axios.post(\"/api/createanswerchoice\", body);\n    },\n\n    getAnswerChoices: async function(questionId){\n        return await axios.get(`/api/answerchoices/${questionId}`);\n    },\n\n    getVotes: async function(questionId){\n        return await axios.get(`/api/getvotes/${questionId}`);\n    },\n\n    createVote: async function(body){\n        return await axios.post(\"/api/createvote\", body);\n    }\n};","import React, { useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport API from \"../utils/API\";\n\nfunction Homepage(){\n\n    const [idQuery, setIdQuery] = useState(\"\");\n    const [redirect, setRedirect] = useState(\"\");\n\n    const handleIdInputChange = event => {\n        event.preventDefault();\n        setIdQuery(event.target.value);\n    };\n\n    const handleSearch = async function(event){\n        event.preventDefault();\n\n        const data = await API.getQuestion(idQuery);\n\n        if(data.data[0] === undefined){\n            alert(\"poll not found\");\n            setIdQuery(\"\");\n            return;\n        }\n        setRedirect(data.data[0].id);\n    };\n\n    return(\n        <div>\n\n            {redirect ? <Redirect to={`/results/${redirect}`}/> : \"\"}\n\n            <h1 className=\"text-center mt-4 mb-4\">Welcome to Everybody Votes</h1>\n\n            {/* container */}\n            <div className=\"container\">\n\n                <div className=\"row justify-content-center\">\n\n                    {/* create poll button */}\n                    <Link to=\"/create\">\n                        <button className=\"btn btn-success\" id=\"createPoll\">Create a poll</button>\n                    </Link>\n\n                </div>\n\n                <h2 className=\"text-center mt-4 mb-4\">or search by id</h2>\n\n                <div className=\"row justify-content-center\">\n\n                    <div className=\"input-group col-4 col-md-4 col-sm-6 col-xs-6\">\n                        <input type=\"text\" className=\"form-control\" value={idQuery} onChange={handleIdInputChange}></input>\n                        <div className=\"input-group-append\">\n                            <button onClick={handleSearch} className=\"btn btn-outline-success\">search</button>\n                        </div>\n                    </div>\n\n                </div>\n\n            </div>\n\n        </div>\n    );\n\n}\n\nexport default Homepage;","import React, { useState } from 'react';\nimport { Redirect } from \"react-router-dom\"\nimport API from \"../utils/API\";\nimport './PollForm.css';\n//import { Pie } from 'react-chartjs-2';\n\nfunction PollForm() {\n\n  const [question, setQuestion] = useState(\"\");\n  const [answerChoices, setAnswerChoices] = useState([\"\", \"\"]);\n  const [redirect, setRedirect] = useState(\"\");\n\n  const handleQuestionChange = event => {\n    event.preventDefault();\n\n    setQuestion(event.target.value);\n  }\n\n  const handleAnswerChange = event => {\n    event.preventDefault();\n\n    let temp = [...answerChoices];\n    temp[event.target.dataset.id] = event.target.value;\n\n    setAnswerChoices(temp);\n  }\n\n  const deleteAnswerChoice = event => {\n    event.preventDefault();\n\n    let temp = [...answerChoices];\n    temp.splice(event.target.dataset.id, 1);\n\n    setAnswerChoices(temp);\n  }\n\n  const addAnswerChoice = event => {\n    event.preventDefault();\n    let temp = [...answerChoices];\n    temp.push(\"\");\n    setAnswerChoices(temp);\n  }\n\n  const handleSubmit = async function(){\n\n    //make sure there is a question\n    if(question.length === 0){\n      alert(\"Please add a question to create a poll.\");\n      return;\n    }\n\n    if(answerChoices.length < 2){\n      alert(\"There must be at least 2 answer choices for this to be a poll.\");\n      return;\n    }\n\n    for(let i = 0; i < answerChoices.length; i++){\n      if(answerChoices[i] === \"\"){\n        alert(\"Make sure that no answer choices are blank.\");\n        return;\n      }\n    }\n\n    //after everything is checked out\n\n    const questionBody = {\n      question: question\n    };\n\n    const questionData = await API.createQuestion(questionBody);\n\n    const questionId = questionData.data.insertId;\n\n    for(let i = 0; i < answerChoices.length; i++){\n      let choiceBody = {\n        questionId: questionId,\n        choiceNum: i,\n        choice: answerChoices[i]\n      };\n      await API.createAnswerChoice(choiceBody);\n    }\n\n\n    alert(\"Question Created. Question id is \" + questionId);\n    setQuestion(\"\");\n    setAnswerChoices([\"\", \"\"]);\n    setRedirect(questionId);\n\n  }\n\n\n  return (\n    <div className=\"App\">\n\n    {redirect ? <Redirect to={`/results/${redirect}`}/> : \"\"}\n\n\n    <div className=\"container justify-content-center\">\n      <h3>Question</h3>\n\n      <input\n      value={question}\n      onChange={handleQuestionChange}\n      ></input>\n\n      {/* Create answer choices */}\n\n      <h3>Answer Choices</h3>\n\n      {answerChoices.map((choice, index) => (\n        <div key={index} className=\"answerChoiceRow\">\n          <input\n          data-id={index}\n          value={choice}\n          placeholder={\"Answer Choice \" + (index + 1)}\n          onChange={handleAnswerChange}>\n          </input>\n          <button className=\"answerChoiceDelete btn btn-danger\" data-id={index} onClick={deleteAnswerChoice}><span data-id={index} className=\"fas fa-times\"/></button>\n        </div>\n      ))}\n\n      <button className=\"addAnswerChoice btn btn-success\" onClick={addAnswerChoice}>Add another answer choice</button>\n\n      <button className=\"submitQuestion btn btn-warning\" onClick={handleSubmit}>Create Poll</button>\n\n    </div>\n    </div>\n  );\n}\n\nexport default PollForm;\n","import React, { useState, useEffect } from \"react\";\nimport { Link, useLocation, Redirect } from \"react-router-dom\";\nimport API from \"../utils/API\";\n\nfunction PollRes({userIp}) {\n\n    const [showResults, setShowResults] = useState(false);\n    const [castingVote, setCastingVote] = useState(false);\n    const [questionData, setQuestionData] = useState();\n    const [answerData, setAnswerData] = useState();\n    const [voteData, setVoteData] = useState();\n    const [selectedAnswer, setSelectedAnswer] = useState();\n    const [parsedVotes, setParsedVotes] = useState();\n    const [redirect, setRedirect] = useState(\"\");\n\n    const location = useLocation();\n    const questionId = location.pathname.substring(location.pathname.indexOf(\"results/\") + 8);\n\n    //run on page load\n    useEffect(() => {\n        //location.pathname is /results/{id} and we want id\n        //8 is length of results/ and we want the number after\n\n        let mounted = true;\n\n        API.getQuestion(questionId)\n            .then(result => {\n                setQuestionData(result.data[0]);\n                if(result.data[0] === undefined){\n                    mounted = false;\n                    setRedirect(\"/\");\n                }\n            });\n\n        API.getAnswerChoices(questionId)\n            .then(result => {\n                if(mounted){\n                    setAnswerData(result.data);\n                }\n            });\n\n        return () => mounted = false;\n\n    }, []);\n\n    //run when question or answerData get retrieved\n    useEffect(() => {\n        //do nothing if both questionData and answerData aren't loaded\n        if(questionData === undefined || answerData === undefined){\n            return;\n        }\n    }, [questionData, answerData]);\n\n    //run when we move to results section to get votes\n    useEffect(() => {\n\n        setCastingVote(false);\n\n        if(showResults === false){\n            return;\n        }\n\n        API.getVotes(questionId)\n            .then(results => {\n                setVoteData(results.data);\n            });\n    }, [showResults]);\n\n    //run when votes are updated\n    useEffect(() => {\n        if(voteData === undefined){\n            return;\n        }\n        const temp = parseVotes(voteData, answerData);\n        setParsedVotes(temp);\n    }, [voteData]);\n\n    const handleRadioChange = event => {\n        event.target.checked = true;\n        setSelectedAnswer(event.target.id);\n    };\n\n    const handleCastVote = event => {\n        event.preventDefault();\n        setCastingVote(true);\n        API.createVote(\n            {\n                questionId: questionId,\n                userIp: userIp,\n                choice: selectedAnswer\n            }\n        )\n            .then(() => {\n                setShowResults(true);\n            });\n    }\n\n    const handleViewResults = event => {\n        event.preventDefault();\n        setShowResults(true);\n    }\n\n    //--------HTML returns-----------\n\n    //loading screen when not everything is loaded\n    if(((questionData === undefined || answerData === undefined) && showResults === false) || (showResults === true && (voteData === undefined || parsedVotes === undefined)) || castingVote){\n        return(\n            <div>\n                {redirect ? <Redirect to={\"/\"} />: \"\"}\n                <h1 className=\"text-center mt-5\">Loading</h1>\n            </div>\n        );\n    }\n\n    //voting screen\n    if(showResults === false && questionData !== undefined && answerData !== undefined){\n        return(\n            <div className=\"container\">\n                \n                {/* Question title */}\n                <div className=\"row justify-content-center\">\n                    <h1 className=\"mt-5 mb-5\">{questionData.question}</h1>\n                </div>\n\n                {/* Answer Choices */}\n                {answerData.map((choice, index) => \n                    (<div key={index} className=\"row justify-content-center\">\n                        <div className=\"form-check col-1\">\n                            <input className=\"form-check-input\" onChange={handleRadioChange} type=\"radio\" name=\"answerChoices\" id={index+1} value={`option${index+1}`}/>\n                            <label className=\"form-check-label\" htmlFor={index+1}>\n                                {choice.choice}\n                            </label>\n                        </div>\n                    </div>)\n                )}\n\n                <div className=\"row justify-content-center mt-5 mb-5\">\n                    <button className=\"castVote btn btn-success mr-5\" onClick={handleCastVote}>Cast Vote</button>\n                    <button className=\"viewResults btn btn-success\" onClick={handleViewResults}> View Results</button>\n                </div>\n\n            </div>\n        );\n    }\n\n\n    //results screen\n    return(\n        <div className=\"container\">\n\n            {/* Question title */}\n            <div className=\"row justify-content-center\">\n                <h1 className=\"mt-5 mb-5\">{questionData.question}</h1>\n            </div>\n\n            {answerData.map((choice, index) => (\n                <div key={index} className=\"row justify-content-center\">\n                    <div className=\"col-8\">\n                        <h5>{`${choice.choice} -- ${parsedVotes[index]}`}</h5>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n\n}\n\nfunction parseVotes(voteData, answerData){\n    let voteCounter = [];\n    for(let i = 0; i < answerData.length; i++){\n        voteCounter.push(0);\n    }\n    for(let i = 0; i < voteData.length; i++){\n        voteCounter[voteData[i].choice -1]++;\n    }\n    return voteCounter;\n}\n\nexport default PollRes;","import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Header from \"./items/Header\";\nimport Homepage from \"./pages/Homepage\";\nimport PollForm from \"./pages/PollForm\";\nimport PollRes from \"./pages/PollRes\"\n\nfunction MainContentContainer(){\n\n    const [userIp, setUserIp] = useState(\"\");\n\n    const ip = require('ip');\n\n    useEffect(() => {\n        setUserIp(ip.address());\n    });\n\n    return(\n        <div>\n            <Router>\n\n                {/* Header unused for now */}\n                {/* <Header/> */}\n\n                <Switch>\n\n                    <Route exact path=\"/create\" component={PollForm} />\n\n                    <Route path=\"/results/\" render={(props) => (\n                        <PollRes\n                            {...props}\n                            userIp={userIp}\n                        />\n                    )}/>\n\n                    <Route component={Homepage} />\n\n                </Switch>\n\n            </Router>\n        </div>\n    );\n}\n\nexport default MainContentContainer;","import React from 'react';\nimport MainContainer from \"./MainContainer\";\n\nfunction App(){\n    return(\n        <MainContainer/>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}